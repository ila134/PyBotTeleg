import telebot
from telebot import types
import time
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)  # Fixed: changed 'name' to '__name__'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7531145285:AAGrOQFuzcivSWEgYxECLuvpMCYYQseOY6M'
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CASIO_DESCRIPTION = """
–ß–∞—Å—ã Casio ‚Äì –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª—å –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏! –•–æ—Ç–∏—Ç–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–≤–µ–¥—É—Ç –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö? –¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ Casio!
üí™ –ü—Ä–æ—á–Ω–æ—Å—Ç—å: –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞—Ä–æ–≤ –∏ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 100 –º–µ—Ç—Ä–æ–≤
‚åöÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –•—Ä–æ–Ω–æ–≥—Ä–∞—Ñ—ã, –±—É–¥–∏–ª—å–Ω–∏–∫–∏, —Ç–∞–π–º–µ—Ä—ã
üîã –î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å: –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ 10 –ª–µ—Ç
üé® –°—Ç–∏–ª—å: –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π

Casio - —ç—Ç–æ –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É!
"""

PHOTOS = {
    '1': './Casio_1.jpg',
    '2': './Casio_2.jpg',
    '3': './Casio_3.jpg'
}

def check_photos_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    for photo_id, path in PHOTOS.items():
        if not os.path.exists(path):
            logger.error(f"–§–æ—Ç–æ {photo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {path}")
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å ‚ôï\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±—Ä–µ–Ω–¥–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ /catalog')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}", exc_info=True)

@bot.message_handler(commands=['catalog'])
def show_catalog(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('Casio'), types.KeyboardButton('Armani'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:', reply_markup=markup)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_catalog: {e}", exc_info=True)

@bot.message_handler(commands=['Casio'])
@bot.message_handler(func=lambda message: message.text == 'Casio')
def show_casio(message):
    try:
        bot.send_message(message.chat.id, CASIO_DESCRIPTION)

        markup = types.InlineKeyboardMarkup()
        for photo_id in PHOTOS:
            markup.add(types.InlineKeyboardButton(f'–§–æ—Ç–æ {photo_id}', callback_data=f'casio_{photo_id}'))
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ:', reply_markup=markup)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ Casio –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_casio: {e}", exc_info=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('casio_'))
def send_photo(call):
    try:
        photo_id = call.data.split('_')[1]
        if photo_id in PHOTOS:
            with open(PHOTOS[photo_id], 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {photo_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {call.message.chat.id}")
        else:
            bot.answer_callback_query(call.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ {photo_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")

def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            if check_photos_exist():
                bot.polling(none_stop=True, interval=2, timeout=30)
            else:
                logger.error("–ù–µ –≤—Å–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω—ã, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                break
        except Exception as e:
            logger.error(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)

if __name__ == '__main__':  # Fixed: corrected the syntax
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    run_bot()
